/*
* PROJECT:          Aura Operating System Development
* CONTENT:          Command Interpreter - CommandManager
* PROGRAMMER(S):    John Welsh <djlw78@gmail.com>
*/

using Aura_OS.Apps.User;
using System;
using Cosmos.HAL.BlockDevice;
using System.Collections.Generic;
using Aura_OS.HAL;
using Aura_OS.IO;

namespace Aura_OS.Shell.cmdIntr
{
    class CommandManager
    {
        //TO-DO: Do for all commands:
        //       Windows like command, Linux like command, Aura original command (optional for the last one)
        //Example: else if ((cmd.Equals("ipconfig")) || (cmd.Equals("ifconfig")) || (cmd.Equals("netconf"))) {

        /// <summary>
        /// Empty constructor. (Good for debug)
        /// </summary>
        public CommandManager() { }
        /// <summary>
        /// Shell Interpreter
        /// </summary>
        /// <param name="cmd">Command</param>
        public static void _CommandManger(string cmd)
        {

        #region Power

            if (cmd.Equals("shutdown"))
            {//NOTE: Why isn't it just the constructor? This leaves more room for <package>.<class>.HelpInfo;
                Power.Shutdown.c_Shutdown();
            }
            else if (cmd.Equals("reboot"))
            {
                Power.Reboot.c_Reboot();
            }

        #endregion Power

        #region Console

            else if ((cmd.Equals("clear")) || (cmd.Equals("cls")))
            {
                c_Console.Clear.c_Clear();
            }
            else if (cmd.StartsWith("echo "))
            {
                c_Console.Echo.c_Echo(cmd);
            }
            else if (cmd.Equals("help"))
            {
                System.Translation.Help._Help();
            }

        #endregion Console

        #region FileSystem

            else if (cmd.StartsWith("cd "))
            {
                FileSystem.CD.c_CD(cmd);
            }
            else if (cmd.Equals("cp"))
            {
                FileSystem.CP.c_CP();
            }
            else if (cmd.StartsWith("cp "))
            {
                FileSystem.CP.c_CP();
            }
            else if ((cmd.Equals("dir")) || (cmd.Equals("ls")))
            {
                FileSystem.Dir.c_Dir();
            }
            else if ((cmd.StartsWith("dir ")) || (cmd.StartsWith("ls ")))
            {
                FileSystem.Dir.c_Dir(cmd);
            }
            else if (cmd.Equals("mkdir"))
            {
                FileSystem.Mkdir.c_Mkdir();
            }
            else if (cmd.StartsWith("mkdir "))
            {
                FileSystem.Mkdir.c_Mkdir(cmd);
            }
            else if (cmd.StartsWith("rmdir "))
            {
                FileSystem.Rmdir.c_Rmdir(cmd);
            }//TODO: orgainize
            else if (cmd.StartsWith("rmfil "))
            {
                FileSystem.Rmfil.c_Rmfil(cmd);
            }
            else if (cmd.Equals("mkfil"))
            {
                FileSystem.Mkfil.c_mkfil();
            }
            else if (cmd.StartsWith("mkfil "))
            {
                FileSystem.Mkfil.c_mkfil(cmd);
            }
            else if (cmd.StartsWith("edit "))
            {
                FileSystem.Edit.c_Edit(cmd);
            }
            else if (cmd.Equals("vol"))
            {
                FileSystem.Vol.c_Vol();
            }
            else if (cmd.StartsWith("run "))
            {
                FileSystem.Run.c_Run(cmd);
            }

        #endregion FileSystem

        #region Settings

            else if (cmd.Equals("logout"))
            {
                Settings.Logout.c_Logout();
            }
            else if (cmd.Equals("settings"))
            {
                Settings.Settings.c_Settings();
            }
            else if (cmd.StartsWith("settings "))
            {
                Settings.Settings.c_Settings(cmd);
            }

        #endregion Settings

        #region System Infomation

            else if (cmd.Equals("systeminfo"))
            {
                SystemInfomation.SystemInfomation.c_SystemInfomation();
            }
            else if ((cmd.Equals("ver")) || (cmd.Equals("version")))
            {
                SystemInfomation.Version.c_Version();
            }
            else if ((cmd.Equals("ipconfig")) || (cmd.Equals("ifconfig")) || (cmd.Equals("netconf")))
            {
                SystemInfomation.IPConfig.c_IPConfig();
            }
            else if ((cmd.Equals("time")) || (cmd.Equals("date")))
            {
                SystemInfomation.Time.c_Time();
            }

            #endregion System Infomation

        #region Tests

            else if (cmd.Equals("crash"))
            {
                Tests.Crash.c_Crash();
            }

            else if (cmd.Equals("fs"))
            {
                HAL.ATA ata = new HAL.ATA();
                Akernel.Init();

                HAL.FileSystem.Root = new HAL.RootFilesystem();
                HAL.GLNFS fd;

                bool installation_detected = false;

                for (int i = 0; i < HAL.Devices.dev.Count; i++)
                {
                    if (HAL.Devices.dev[i].dev is Partition)
                    {
                        if (HAL.GLNFS.isGFS((Partition)HAL.Devices.dev[i].dev))
                        {
                            fd = new HAL.GLNFS((Partition)HAL.Devices.dev[i].dev);
                            if (fd.DriveLabel == "GruntyOS")
                            {
                                Console.WriteLine("Installation found, mounted partition (" + HAL.Devices.dev[i].name + ")");
                                installation_detected = true;
                                break;
                            }
                        }
                    }
                }
                if (!installation_detected)
                    Console.WriteLine("Installation not detected!");
                Console.ReadKey();
                Setup.Init();
            }

            #endregion Tests

            #region Tools

            else if (cmd.Equals("snake"))
            {
                Tools.Snake.c_Snake();
            }
            else if (cmd.StartsWith("md5"))
            {
                Tools.MD5.c_MD5(cmd);
            }

            #endregion

            #region Util           

            else
            {
                Util.CmdNotFound.c_CmdNotFound();
            }

        #endregion Util

        }


    }

    class Setup
    {

        public static void Init()
        {

            Console.CursorLeft = 0;
            Console.BackgroundColor = ConsoleColor.DarkBlue;
            Console.Clear();
            Console.CursorTop = 0;
            bool trial = false;
            Console.ForegroundColor = ConsoleColor.White;
            Console.BackgroundColor = ConsoleColor.DarkRed;
            Console.WriteLine("GruntyOS Setup Wizard - Step 1: Pick a partition.                               ");
            Console.BackgroundColor = ConsoleColor.DarkBlue;
            List<string> parts = new List<string>();
            List<Partition> partitions = new List<Partition>();
            int d = 1;
            //Kernel.Shell.User = "sys";
            //Kernel.Shell.CurrentDirectory = "/";

            for (int i = 0; i < BlockDevice.Devices.Count; i++)
            {
                BlockDevice device = BlockDevice.Devices[i];
                if (device is Partition)
                {
                    parts.Add("/dev/sda" + d.ToString());
                    partitions.Add((Partition)device);
                    d++;
                }
            }
            RAMDisk rd = new RAMDisk(400);
            Partition p = new Partition(rd, 0, 400);
            Devices.device dev = new Devices.device();
            dev.name = "/dev/rdz";
            dev.dev = p;
            Devices.dev.Add(dev);
            partitions.Add(p);

            parts.Add("Try GruntyOS");
            parts.Add("Create/Edit Partitions");
            fill(ConsoleColor.Gray, 15, 40, 4, 13, true);
            Console.CursorLeft = 16;
            Console.CursorTop = 5;
            Console.BackgroundColor = ConsoleColor.Gray;
            Console.ForegroundColor = ConsoleColor.DarkMagenta;
            Console.WriteLine("Please choose a partition");
            uint selected = Menu(parts.ToArray(), 16, 6);
            fill(ConsoleColor.Gray, 15, 40, 4, 13, true);
            if (selected == parts.Count - 1)
            {
                Console.ForegroundColor = ConsoleColor.White;
                Console.BackgroundColor = ConsoleColor.DarkMagenta;
                Console.CursorLeft = 0;
                Console.CursorTop = 0;
                Console.Clear();
                //Kernel.Shell.Execute("fdisk"); TODO!!!
                Cosmos.System.Power.Reboot();
            }
            else if (selected == parts.Count - 2)
            {

                parts[(int)selected] = "/dev/rdz";
                trial = true;
            }
            create_acc:
            Console.CursorTop = 0;
            Console.ForegroundColor = ConsoleColor.White;
            Console.BackgroundColor = ConsoleColor.DarkRed;
            Console.WriteLine("GruntyOS Setup Wizard - Step 2: Create an account                               ");

            Console.BackgroundColor = ConsoleColor.Gray;
            Console.ForegroundColor = ConsoleColor.DarkMagenta;
            Console.CursorLeft = 16;
            Console.CursorTop = 5;
            Console.WriteLine("Please create your GruntyOS account");
            Console.CursorLeft = 16;
            Console.CursorTop = 8;
            Console.WriteLine("Password:");
            Console.CursorTop = 7;
            Console.CursorLeft = 16;
            Console.Write("Username:");
            string User = Console.ReadLine();
            Console.CursorLeft = 16;
            Console.Write("Password:");
            string Pass = Console.ReadLine();
            GLNFS fd = new GLNFS(partitions.ToArray()[selected]);

            Console.BackgroundColor = ConsoleColor.Blue;
            Console.Clear();
            Console.CursorTop = 0;
            Console.ForegroundColor = ConsoleColor.White;
            Console.BackgroundColor = ConsoleColor.DarkRed;
            Console.WriteLine("GruntyOS Setup Wizard - Step 3: Installing Grunty OS                            ");

            Console.BackgroundColor = ConsoleColor.DarkBlue;
            Console.ForegroundColor = ConsoleColor.White;

            doagain:
            try
            {
                Console.WriteLine("Formating selected partition to GLNFS..");
                commandes.Umount("-a");

                string[] args = new string[]
        {
            parts[(int)selected],
            "GruntyOS"
        };

                commandes.Mkfs(args);

                string[] arg2 = new string[]
                {
                     parts[(int)selected]
                };
                commandes.Mount(arg2);

                Console.WriteLine("STEPPPP");
                Console.ReadKey();
               
                File.Chmod("/etc/passwd", "600");
                File.Save("/etc/init.d/gsh.sh", "PS1 = \"\\c32\\u\\c31 \\W \\c40 $\"");
                File.Save("/etc/sudoers", User + "\nroot");
                File.Chmod("/etc/init.d/gsh.sh", "777");
                HAL.FileSystem.Root.saveFile(new byte[] { 0xBA, 0x02, 0x00, 0x00, 0x00, 0x83, 0xE2, 0x02, 0xE5, 0x64, 0x83, 0xF8, 0x02, 0x7D, 0xF6, 0xB8, 0xFE, 0x00, 0x00, 0x00, 0xE7, 0x64, 0xF4 }, "/bin/reboot", "sys");
                HAL.FileSystem.Root.saveFile(new byte[] { 0x7F, 0x45, 0x4C, 0x46, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x07, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x01, 0x00, 0x00, 0xDD, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00, 0xB8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x03, 0x00, 0x00, 0x60, 0x01, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0x04, 0x00, 0x00, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x27, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x05, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB8, 0x06, 0x00, 0x00, 0x00, 0xCD, 0x80, 0xB8, 0x01, 0x00, 0x00, 0x00, 0xBE, 0x14, 0x00, 0x00, 0x00, 0xCD, 0x80, 0xB8, 0x03, 0x00, 0x00, 0x00, 0xCD, 0x80, 0xB8, 0x09, 0x00, 0x00, 0x00, 0xCD, 0x80, 0x89, 0xC2, 0xB9, 0x00, 0x00, 0x00, 0x00, 0x89, 0xF9, 0xB8, 0x0A, 0x00, 0x00, 0x00, 0xBE, 0xA4, 0x00, 0x00, 0x00, 0xCD, 0x80, 0x47, 0xB8, 0x01, 0x00, 0x00, 0x00, 0xCD, 0x80, 0xE8, 0x8D, 0x00, 0x00, 0x00, 0x39, 0xD7, 0x7C, 0xE1, 0xB8, 0x01, 0x00, 0x00, 0x00, 0xBE, 0x46, 0x00, 0x00, 0x00, 0xCD, 0x80, 0xB8, 0x02, 0x00, 0x00, 0x00, 0xBF, 0x00, 0x00, 0x00, 0x00, 0xCD, 0x80, 0xBE, 0x4C, 0x00, 0x00, 0x00, 0xB8, 0x07, 0x00, 0x00, 0x00, 0xCD, 0x80, 0x83, 0xF8, 0x01, 0x75, 0x09, 0xB8, 0x03, 0x00, 0x00, 0x00, 0xCD, 0x80, 0xEB, 0xCE, 0xB8, 0x07, 0x00, 0x00, 0x00, 0xBE, 0x50, 0x00, 0x00, 0x00, 0xCD, 0x80, 0x83, 0xF8, 0x01, 0x75, 0x08, 0xB8, 0x61, 0x00, 0x00, 0x00, 0xCD, 0x80, 0xC3, 0xB8, 0x08, 0x00, 0x00, 0x00, 0xB9, 0x05, 0x00, 0x00, 0x00, 0xBE, 0x55, 0x00, 0x00, 0x00, 0xCD, 0x80, 0x83, 0xF8, 0x01, 0x75, 0x16, 0xBE, 0x00, 0x00, 0x00, 0x00, 0x83, 0xC6, 0x05, 0xB8, 0x01, 0x00, 0x00, 0x00, 0xCD, 0x80, 0xE8, 0x14, 0x00, 0x00, 0x00, 0xEB, 0x89, 0xB8, 0x01, 0x00, 0x00, 0x00, 0xBE, 0x85, 0x00, 0x00, 0x00, 0xCD, 0x80, 0xE9, 0x78, 0xFF, 0xFF, 0xFF, 0xC3, 0xBE, 0xA2, 0x00, 0x00, 0x00, 0xB8, 0x01, 0x00, 0x00, 0x00, 0xCD, 0x80, 0xC3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x57, 0x65, 0x6C, 0x63, 0x6F, 0x6D, 0x65, 0x20, 0x74, 0x6F, 0x20, 0x47, 0x44, 0x4F, 0x53, 0x21, 0x20, 0x2C, 0x20, 0x61, 0x20, 0x44, 0x4F, 0x53, 0x20, 0x4C, 0x69, 0x6B, 0x65, 0x20, 0x73, 0x68, 0x65, 0x6C, 0x6C, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x47, 0x72, 0x75, 0x6E, 0x74, 0x79, 0x4F, 0x53, 0x0A, 0x00, 0x41, 0x3A, 0x5C, 0x3E, 0x20, 0x00, 0x63, 0x6C, 0x73, 0x00, 0x65, 0x78, 0x69, 0x74, 0x00, 0x65, 0x63, 0x68, 0x6F, 0x20, 0x00, 0x43, 0x6F, 0x6D, 0x6D, 0x61, 0x6E, 0x64, 0x73, 0x0A, 0x65, 0x63, 0x68, 0x6F, 0x20, 0x5B, 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x20, 0x74, 0x65, 0x78, 0x74, 0x5D, 0x0A, 0x63, 0x6C, 0x73, 0x0A, 0x68, 0x65, 0x6C, 0x70, 0x0A, 0x64, 0x69, 0x72, 0x0A, 0x00, 0x49, 0x6E, 0x76, 0x61, 0x6C, 0x69, 0x64, 0x20, 0x63, 0x6F, 0x6D, 0x6D, 0x61, 0x6E, 0x64, 0x20, 0x6F, 0x72, 0x20, 0x70, 0x72, 0x6F, 0x67, 0x72, 0x61, 0x6D, 0x21, 0x0A, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2E, 0x74, 0x65, 0x78, 0x74, 0x00, 0x2E, 0x64, 0x61, 0x74, 0x61, 0x00, 0x2E, 0x73, 0x68, 0x73, 0x74, 0x72, 0x74, 0x61, 0x62, 0x00, 0x2E, 0x73, 0x79, 0x6D, 0x74, 0x61, 0x62, 0x00, 0x2E, 0x73, 0x74, 0x72, 0x74, 0x61, 0x62, 0x00, 0x2E, 0x72, 0x65, 0x6C, 0x2E, 0x74, 0x65, 0x78, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0xF1, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x02, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x18, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x21, 0x00, 0x00, 0x00, 0x47, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x26, 0x00, 0x00, 0x00, 0x47, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x2E, 0x00, 0x00, 0x00, 0x79, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x37, 0x00, 0x00, 0x00, 0x92, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x40, 0x00, 0x00, 0x00, 0xBE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x4C, 0x00, 0x00, 0x00, 0xD0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x5A, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x5E, 0x00, 0x00, 0x00, 0x46, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x65, 0x00, 0x00, 0x00, 0x4C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x69, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x6E, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x72, 0x00, 0x00, 0x00, 0x5B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x77, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x7B, 0x00, 0x00, 0x00, 0xA2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x7F, 0x00, 0x00, 0x00, 0xA4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x67, 0x64, 0x6F, 0x73, 0x2E, 0x61, 0x73, 0x6D, 0x00, 0x70, 0x72, 0x6F, 0x67, 0x72, 0x61, 0x6D, 0x5F, 0x73, 0x74, 0x61, 0x72, 0x74, 0x00, 0x64, 0x6F, 0x5F, 0x61, 0x67, 0x61, 0x69, 0x6E, 0x00, 0x73, 0x74, 0x6F, 0x70, 0x00, 0x63, 0x6D, 0x64, 0x6C, 0x6F, 0x6F, 0x70, 0x00, 0x65, 0x78, 0x69, 0x74, 0x5F, 0x63, 0x6D, 0x64, 0x00, 0x65, 0x63, 0x68, 0x6F, 0x5F, 0x63, 0x6D, 0x64, 0x00, 0x75, 0x6E, 0x6B, 0x6E, 0x6F, 0x77, 0x6E, 0x5F, 0x63, 0x6D, 0x64, 0x00, 0x6E, 0x65, 0x77, 0x6C, 0x69, 0x6E, 0x65, 0x00, 0x69, 0x6E, 0x70, 0x75, 0x74, 0x00, 0x6D, 0x73, 0x67, 0x00, 0x70, 0x72, 0x6F, 0x6D, 0x70, 0x74, 0x00, 0x63, 0x6C, 0x73, 0x00, 0x65, 0x78, 0x69, 0x74, 0x00, 0x65, 0x63, 0x68, 0x00, 0x68, 0x65, 0x6C, 0x70, 0x00, 0x65, 0x72, 0x72, 0x00, 0x65, 0x6F, 0x6C, 0x00, 0x66, 0x69, 0x6C, 0x65, 0x5F, 0x6E, 0x61, 0x6D, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x01, 0x03, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x01, 0x03, 0x00, 0x00, 0x4D, 0x00, 0x00, 0x00, 0x01, 0x03, 0x00, 0x00, 0x59, 0x00, 0x00, 0x00, 0x01, 0x03, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x01, 0x03, 0x00, 0x00, 0x7F, 0x00, 0x00, 0x00, 0x01, 0x03, 0x00, 0x00, 0x9D, 0x00, 0x00, 0x00, 0x01, 0x03, 0x00, 0x00, 0xA9, 0x00, 0x00, 0x00, 0x01, 0x03, 0x00, 0x00, 0xC4, 0x00, 0x00, 0x00, 0x01, 0x03, 0x00, 0x00, 0xD1, 0x00, 0x00, 0x00, 0x01, 0x03, 0x00, 0x00 }, "/bin/gdos", "sys");
                HAL.FileSystem.Root.saveFile(new byte[] { 0x7F, 0x45, 0x4C, 0x46, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x07, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x01, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x01, 0x00, 0x00, 0x4A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x01, 0x00, 0x00, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0xD0, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD0, 0x02, 0x00, 0x00, 0x5D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x27, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x03, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE8, 0x35, 0x00, 0x00, 0x00, 0xE8, 0x15, 0x00, 0x00, 0x00, 0xFF, 0x35, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x35, 0x04, 0x00, 0x00, 0x00, 0xE8, 0x15, 0x00, 0x00, 0x00, 0xF4, 0xEB, 0xEC, 0xC3, 0xB8, 0x03, 0x00, 0x00, 0x00, 0xCD, 0x80, 0xC3, 0xB8, 0x01, 0x00, 0x00, 0x00, 0x5E, 0xCD, 0x80, 0xC3, 0x5E, 0x5F, 0xB8, 0x04, 0x00, 0x00, 0x00, 0xCD, 0x80, 0xC3, 0xB8, 0x06, 0x00, 0x00, 0x00, 0xCD, 0x80, 0xC3, 0xB8, 0x61, 0x00, 0x00, 0x00, 0xCD, 0x80, 0xC3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2E, 0x64, 0x61, 0x74, 0x61, 0x00, 0x2E, 0x74, 0x65, 0x78, 0x74, 0x00, 0x2E, 0x73, 0x68, 0x73, 0x74, 0x72, 0x74, 0x61, 0x62, 0x00, 0x2E, 0x73, 0x79, 0x6D, 0x74, 0x61, 0x62, 0x00, 0x2E, 0x73, 0x74, 0x72, 0x74, 0x61, 0x62, 0x00, 0x2E, 0x72, 0x65, 0x6C, 0x2E, 0x74, 0x65, 0x78, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0xF1, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x02, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x12, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x1A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x31, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x38, 0x00, 0x00, 0x00, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x3E, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x48, 0x00, 0x00, 0x00, 0x3A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x53, 0x00, 0x00, 0x00, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x65, 0x64, 0x69, 0x74, 0x2E, 0x61, 0x73, 0x6D, 0x00, 0x63, 0x75, 0x72, 0x73, 0x6F, 0x72, 0x58, 0x00, 0x63, 0x75, 0x72, 0x73, 0x6F, 0x72, 0x59, 0x00, 0x6D, 0x61, 0x69, 0x6E, 0x00, 0x6D, 0x61, 0x69, 0x6E, 0x2E, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6E, 0x00, 0x63, 0x6C, 0x72, 0x73, 0x63, 0x72, 0x00, 0x70, 0x72, 0x69, 0x6E, 0x74, 0x00, 0x73, 0x65, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6F, 0x72, 0x00, 0x70, 0x75, 0x73, 0x68, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6E, 0x00, 0x70, 0x6F, 0x70, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6E, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x01, 0x02, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x01, 0x02, 0x00, 0x00 }, "/bin/edit", "sys");
                HAL.FileSystem.Root.saveFile(new byte[] { 0x48, 0x65, 0x6C, 0x6C, 0x6F, 0x2C, 0x20, 0x77, 0x6F, 0x72, 0x6C, 0x64, 0x21, 0x00, 0x00, 0x00, 0x5D, 0xC3, 0x55, 0x89, 0xE5, 0x83, 0xE4, 0xF0, 0x83, 0xEC, 0x10, 0xE8, 0x00, 0x00, 0x00, 0x00, 0xC7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0xE8, 0xD4, 0xFF, 0xFF, 0xFF, 0xC9, 0xC3, 0x90, 0x90 }, "/bin/beep", "sys");
                HAL.FileSystem.Root.saveFile(new byte[] { 0x7F, 0x45, 0x4C, 0x46, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x07, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x01, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x01, 0x00, 0x00, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB0, 0x01, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x27, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE8, 0xFC, 0xFF, 0xFF, 0xFF, 0xC3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2E, 0x74, 0x65, 0x78, 0x74, 0x00, 0x2E, 0x64, 0x61, 0x74, 0x61, 0x00, 0x2E, 0x73, 0x68, 0x73, 0x74, 0x72, 0x74, 0x61, 0x62, 0x00, 0x2E, 0x73, 0x79, 0x6D, 0x74, 0x61, 0x62, 0x00, 0x2E, 0x73, 0x74, 0x72, 0x74, 0x61, 0x62, 0x00, 0x2E, 0x72, 0x65, 0x6C, 0x2E, 0x74, 0x65, 0x78, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0xF1, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x02, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x65, 0x64, 0x69, 0x74, 0x2E, 0x61, 0x73, 0x6D, 0x00, 0x73, 0x61, 0x79, 0x48, 0x65, 0x6C, 0x6C, 0x6F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, "/bin/hello", "sys");

                HAL.FileSystem.Root.saveFile(new byte[] { 0x7F, 0x45, 0x4C, 0x46, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x07, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x01, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x01, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x01, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x27, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB8, 0x01, 0x00, 0x00, 0x00, 0xBE, 0x00, 0x00, 0x00, 0x00, 0xCD, 0x80, 0xC3, 0x00, 0x00, 0x00, 0x48, 0x65, 0x6C, 0x6C, 0x6F, 0x2C, 0x20, 0x57, 0x6F, 0x72, 0x6C, 0x64, 0x21, 0x00, 0x00, 0x00, 0x00, 0x2E, 0x74, 0x65, 0x78, 0x74, 0x00, 0x2E, 0x64, 0x61, 0x74, 0x61, 0x00, 0x2E, 0x73, 0x68, 0x73, 0x74, 0x72, 0x74, 0x61, 0x62, 0x00, 0x2E, 0x73, 0x79, 0x6D, 0x74, 0x61, 0x62, 0x00, 0x2E, 0x73, 0x74, 0x72, 0x74, 0x61, 0x62, 0x00, 0x2E, 0x72, 0x65, 0x6C, 0x2E, 0x74, 0x65, 0x78, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0xF1, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x02, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x62, 0x65, 0x65, 0x70, 0x2E, 0x61, 0x73, 0x6D, 0x00, 0x73, 0x61, 0x79, 0x48, 0x65, 0x6C, 0x6C, 0x6F, 0x00, 0x6D, 0x73, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x01, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, "/bin/test.so", "sys");
                File.Chmod("/bin/gdos", "777");
                File.Chmod("/bin/reboot", "777");
                File.Chmod("/bin/hello", "777");
                File.Chmod("/bin/edit", "777");
                File.Save("/etc/motd", @"Welcome to Grunty OS v 3.0.1 codenamed 'Infinity' Beta!


*  For full documentation visit:

   http://infinity.gruntxproductions.net/wiki/


*  More documentation can be found in /usr/doc
   


You can change this message by modifiying /etc/motd

");
                Console.WriteLine(parts[(int)selected]);
            }
            catch (Exception c)
            {
                Console.WriteLine(c.Message);
                Console.WriteLine("FAILURE: Retrying.... (This might happen randomly due to unknown bug. Just reboot and I recommend VMWare)");
                Console.ReadLine();
                goto doagain;
            }
            Console.ReadLine();
            Console.BackgroundColor = ConsoleColor.DarkMagenta;
            Console.ForegroundColor = ConsoleColor.White;
            Console.Clear();

            //Cosmos.Core.Global.CPU.Reboot();
            if (!trial)
            {
                Console.WriteLine("Setup complete");
                Console.WriteLine("Please reboot...");
                Cosmos.System.Power.Reboot();
            }


        }

        public static void fill(ConsoleColor c, int x, int width, int y, int height, bool border = false)
        {
            ConsoleColor prevColor = Console.BackgroundColor;

            Console.BackgroundColor = c;
            int left = Console.CursorLeft, top = Console.CursorTop;
            for (int X = 0; X < width; X++)
            {
                for (int Y = 0; Y < height; Y++)
                {
                    Console.CursorLeft = X + x;
                    Console.CursorTop = Y + y;
                    Console.Write(" ");
                }
            }
            Console.CursorLeft = left;
            Console.CursorTop = top;
            Console.ForegroundColor = ConsoleColor.DarkMagenta;
            if (border)
                //Terminal.Rect(x, y, width, height);
            Console.BackgroundColor = prevColor;

        }
        public static uint CenteredMenu(string[] items, int x, int y)
        {
            int lastLength = 0;
            int maxLength = 0;
            for (int i = 0; i < items.Length; i++)
            {
                if (items[i].Length > lastLength)
                {
                    maxLength = items[i].Length;
                }
                lastLength = items[i].Length;
            }
            int room = 80;
            int half = room / 2;
            int halfl = maxLength / 2;
            int start = half - halfl;

            int room2 = 25;
            int half2 = room2 / 2;
            int halfl2 = items.Length / 2;
            int start2 = half2 - halfl2;
            uint choice = Menu(items, start, start2);
            return choice;
        }
        public static uint Menu(string[] items, int x, int y)
        {
            int curseleft = x;
            uint selc = 0;
            int cursetop = y;

            redraw:
            Console.CursorTop = y;
            for (int i = 0; i < items.Length; i++)
            {
                Console.CursorLeft = curseleft;
                if (i == selc)
                {
                    ConsoleColor c1 = Console.ForegroundColor;
                    ConsoleColor c2 = Console.BackgroundColor;
                    Console.BackgroundColor = c1;
                    Console.ForegroundColor = c2;
                    Console.WriteLine(items[i]);
                    Console.ForegroundColor = c1;
                    Console.BackgroundColor = c2;
                }
                else
                {

                    Console.CursorLeft = curseleft;
                    Console.WriteLine(items[i]);
                }
            }
            byte c = (byte)Console.Read();
            if (c == 145)
            {
                if (selc == 0) selc = (uint)items.Length;
                selc--;

                goto redraw;
            }
            else if (c == (byte)147)
            {

                selc++;
                if (selc == (uint)items.Length)
                    selc = 0;
                goto redraw;
            }
            else if (c == (byte)10)
            {
                return selc;
            }
            else
            {
                goto redraw;
            }
            Console.WriteLine(c.ToString());

        }


    }

    class commandes
    {
        public static void Umount(string arg)
        {
            if (arg == "-a")
                HAL.FileSystem.Root.Mountpoints.Clear();
            else
                HAL.FileSystem.Root.Unmount(arg);
        }

        public static void Mkfs(string[] args)
        {
            string name = args[1];
            GLNFS fs = new GLNFS((Partition)Devices.getDevice(name));
            string label = "Filesystem";
            if (args.Length == 3)
                label = args[2];
            fs.Format(label);
        }

        public static void Mount(string[] args)
        {
            bool temp = false;
            int size = 100;
            string loc = "";
            for (int i = 1; i < args.Length; i++)
            {
                if (args[i] == "-t")
                    temp = true;
                if (args[i] == "-size")
                {
                    size = Conversions.StringToInt(args[++i]);
                }
                if (args[i] == "tempfs")
                {
                    loc = args[++i];
                }
            }

            int fs = 1;
            for (int i = 0; i < Devices.dev.Count; i++)
            {
                BlockDevice device = (BlockDevice)(Devices.dev[i].dev);
                if (Devices.dev[i].name == args[1])
                {
                    GLNFS fd = new GLNFS((Partition)device);
                    if (HAL.GLNFS.isGFS((Partition)device))
                    {
                        if (args.Length > 2)
                            ((HAL.RootFilesystem)HAL.FileSystem.Root).Mount("/dev/sd", fd);
                        else
                            ((HAL.RootFilesystem)HAL.FileSystem.Root).Mount("", fd);
                    }
                }


            }
        }

        public string getFullPath(string s)
        {
                return "/" + Utils.Util.cleanName("/dev/sd") + " / " + Utils.Util.cleanName(s);

        }
    }
}
